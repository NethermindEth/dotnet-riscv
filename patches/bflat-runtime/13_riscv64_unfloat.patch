diff --git a/src/runtime/eng/native/build-commons.sh b/src/runtime/eng/native/build-commons.sh
index a3bdc2ac1..2c0e1ed91 100755
--- a/eng/native/build-commons.sh
+++ b/eng/native/build-commons.sh
@@ -63,6 +63,12 @@ build_native()
     # All set to commence the build
     echo "Commencing build of \"$target\" target in \"$message\" for $__TargetOS.$__TargetArch.$__BuildType in $intermediatesDir"
-
+    echo "Target RID: ${__TargetRid}, Host arch: ${hostArch}"
+    if [[ "${__TargetRid}" == linux*-riscv64 ]] && [ "${hostArch}" == "riscv64" ] ; then
+        echo "Hijack cxxflags/cflags $hostArch"
+        export EXTRA_CXXFLAGS="-march=rv64ima -mabi=lp64 -gdwarf-4"
+        export EXTRA_CFLAGS="-march=rv64ima -mabi=lp64 -gdwarf-4"
+    fi
+
     SAVED_CFLAGS="${CFLAGS}"
     SAVED_CXXFLAGS="${CXXFLAGS}"
     SAVED_LDFLAGS="${LDFLAGS}"
diff --git a/eng/native/configurecompiler.cmake b/eng/native/configurecompiler.cmake
index 2957221d4..856e7093b 100644
--- a/eng/native/configurecompiler.cmake
+++ b/eng/native/configurecompiler.cmake
@@ -784,6 +784,11 @@ if(CLR_CMAKE_HOST_UNIX_X86)
   add_compile_options(-msse2)
 endif()
 
+if(CLR_CMAKE_HOST_UNIX_RISCV64)
+  # Remove compressed instructions and D extension
+  add_compile_options(-march=rv64ima -mabi=lp64 -gdwarf-4 -mno-relax)
+endif()
+
 if(CLR_CMAKE_HOST_UNIX)
   add_compile_options(${CLR_ADDITIONAL_COMPILER_OPTIONS})
 endif(CLR_CMAKE_HOST_UNIX)
diff --git a/src/coreclr/debug/di/riscv64/floatconversion.S b/src/coreclr/debug/di/riscv64/floatconversion.S
index 138db0bc9..85167d980 100644
--- a/src/coreclr/debug/di/riscv64/floatconversion.S
+++ b/src/coreclr/debug/di/riscv64/floatconversion.S
@@ -7,6 +7,6 @@
 //     input: (in A0) the address of the ULONGLONG to be converted to a double
 //     output: the double corresponding to the ULONGLONG input value
 LEAF_ENTRY FPFillR8, .TEXT
-        fld  fa0, 0(a0)
+        //fld  fa0, 0(a0)
         ret
 LEAF_END FPFillR8, .TEXT
diff --git a/src/coreclr/gc/unix/configure.cmake b/src/coreclr/gc/unix/configure.cmake
index 0cc66c3e4..15ff4e496 100644
--- a/src/coreclr/gc/unix/configure.cmake
+++ b/src/coreclr/gc/unix/configure.cmake
@@ -105,9 +105,9 @@ elseif (HAVE_PTHREAD_IN_LIBC)
   set(PTHREAD_LIBRARY c)
 endif()
 
-check_library_exists(${PTHREAD_LIBRARY} pthread_condattr_setclock "" HAVE_PTHREAD_CONDATTR_SETCLOCK)
+#check_library_exists(${PTHREAD_LIBRARY} pthread_condattr_setclock "" HAVE_PTHREAD_CONDATTR_SETCLOCK)
 
-check_library_exists(${PTHREAD_LIBRARY} pthread_setaffinity_np "" HAVE_PTHREAD_SETAFFINITY_NP)
+#check_library_exists(${PTHREAD_LIBRARY} pthread_setaffinity_np "" HAVE_PTHREAD_SETAFFINITY_NP)
 
 check_cxx_symbol_exists(_SC_PHYS_PAGES unistd.h HAVE__SC_PHYS_PAGES)
 check_cxx_symbol_exists(_SC_AVPHYS_PAGES unistd.h HAVE__SC_AVPHYS_PAGES)
diff --git a/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S b/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S
index 09dc50e5a..63f2c88eb 100644
--- a/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S
+++ b/src/coreclr/nativeaot/Runtime/riscv64/ExceptionHandling.S
@@ -31,18 +31,18 @@
     .endif
 
     // Safely using available registers for floating-point saves
-    fsd  fs0, 0x10(sp)
-    fsd  fs1, 0x18(sp)
-    fsd  fs2, 0x20(sp)
-    fsd  fs3, 0x28(sp)
-    fsd  fs4, 0x30(sp)
-    fsd  fs5, 0x38(sp)
-    fsd  fs6, 0x40(sp)
-    fsd  fs7, 0x48(sp)
-    fsd  fs8, 0x50(sp)
-    fsd  fs9, 0x58(sp)
-    fsd  fs10, 0x60(sp)
-    fsd  fs11, 0x68(sp)
+    //fsd  fs0, 0x10(sp)
+    //fsd  fs1, 0x18(sp)
+    //fsd  fs2, 0x20(sp)
+    //fsd  fs3, 0x28(sp)
+    //fsd  fs4, 0x30(sp)
+    //fsd  fs5, 0x38(sp)
+    //fsd  fs6, 0x40(sp)
+    //fsd  fs7, 0x48(sp)
+    //fsd  fs8, 0x50(sp)
+    //fsd  fs9, 0x58(sp)
+    //fsd  fs10, 0x60(sp)
+    //fsd  fs11, 0x68(sp)
 
     PROLOG_SAVE_REG_PAIR_INDEXED  fp, ra, 0x78
 
@@ -140,18 +140,18 @@
         // Load FP preserved registers
         //
         addi t3, \regdisplayReg, OFFSETOF__REGDISPLAY__F   // Base address of floating-point registers
-        fld  fs0,  0x40(t3)                                // Load fs0
-        fld  fs1,  0x48(t3)                                // Load fs1
-        fld  fs2,  0x90(t3)                                // Load fs2
-        fld  fs3,  0x98(t3)                                // Load fs3
-        fld  fs4,  0xa0(t3)                                // Load fs4
-        fld  fs5,  0xa8(t3)                                // Load fs5
-        fld  fs6,  0xb0(t3)                                // Load fs6
-        fld  fs7,  0xb8(t3)                                // Load fs7
-        fld  fs8,  0xc0(t3)                                // Load fs8
-        fld  fs9,  0xc8(t3)                                // Load fs9
-        fld  fs10, 0xd0(t3)                                // Load fs10
-        fld  fs11, 0xd8(t3)                                // Load fs11
+        //fld  fs0,  0x40(t3)                                // Load fs0
+        //fld  fs1,  0x48(t3)                                // Load fs1
+        //fld  fs2,  0x90(t3)                                // Load fs2
+        //fld  fs3,  0x98(t3)                                // Load fs3
+        //fld  fs4,  0xa0(t3)                                // Load fs4
+        //fld  fs5,  0xa8(t3)                                // Load fs5
+        //fld  fs6,  0xb0(t3)                                // Load fs6
+        //fld  fs7,  0xb8(t3)                                // Load fs7
+        //fld  fs8,  0xc0(t3)                                // Load fs8
+        //fld  fs9,  0xc8(t3)                                // Load fs9
+        //fld  fs10, 0xd0(t3)                                // Load fs10
+        //fld  fs11, 0xd8(t3)                                // Load fs11
 
     .endm
 
@@ -188,18 +188,18 @@
 
         // Save floating-point registers
         addi  t3, \regdisplayReg, OFFSETOF__REGDISPLAY__F
-        fsd  fs0,  0x40(t3)
-        fsd  fs1,  0x48(t3)
-        fsd  fs2,  0x90(t3)
-        fsd  fs3,  0x98(t3)
-        fsd  fs4,  0xa0(t3)
-        fsd  fs5,  0xa8(t3)
-        fsd  fs6,  0xb0(t3)
-        fsd  fs7,  0xb8(t3)
-        fsd  fs8,  0xc0(t3)
-        fsd  fs9,  0xc8(t3)
-        fsd  fs10, 0xd0(t3)
-        fsd  fs11, 0xd8(t3)
+        //fsd  fs0,  0x40(t3)
+        //fsd  fs1,  0x48(t3)
+        //fsd  fs2,  0x90(t3)
+        //fsd  fs3,  0x98(t3)
+        //fsd  fs4,  0xa0(t3)
+        //fsd  fs5,  0xa8(t3)
+        //fsd  fs6,  0xb0(t3)
+        //fsd  fs7,  0xb8(t3)
+        //fsd  fs8,  0xc0(t3)
+        //fsd  fs9,  0xc8(t3)
+        //fsd  fs10, 0xd0(t3)
+        //fsd  fs11, 0xd8(t3)
 
 .endm
 
@@ -450,18 +450,18 @@ LOCAL_LABEL(NotHijacked):
         ALLOC_CALL_FUNCLET_FRAME 0x90
 
         // Save floating-point registers
-        fsd  fs0,  0x00(sp)
-        fsd  fs1,  0x08(sp)
-        fsd  fs2,  0x10(sp)
-        fsd  fs3,  0x18(sp)
-        fsd  fs4,  0x20(sp)
-        fsd  fs5,  0x28(sp)
-        fsd  fs6,  0x30(sp)
-        fsd  fs7,  0x38(sp)
-        fsd  fs8,  0x40(sp)
-        fsd  fs9,  0x48(sp)
-        fsd  fs10, 0x50(sp)
-        fsd  fs11, 0x58(sp)
+        //fsd  fs0,  0x00(sp)
+        //fsd  fs1,  0x08(sp)
+        //fsd  fs2,  0x10(sp)
+        //fsd  fs3,  0x18(sp)
+        //fsd  fs4,  0x20(sp)
+        //fsd  fs5,  0x28(sp)
+        //fsd  fs6,  0x30(sp)
+        //fsd  fs7,  0x38(sp)
+        //fsd  fs8,  0x40(sp)
+        //fsd  fs9,  0x48(sp)
+        //fsd  fs10, 0x50(sp)
+        //fsd  fs11, 0x58(sp)
 
         // Save integer registers
         sd  a0, 0x60(sp)    // Save a0 to a3
@@ -593,18 +593,18 @@ LOCAL_LABEL(NoAbort):
         ALLOC_CALL_FUNCLET_FRAME 0x80
 
         // Save floating-point registers
-        fsd  fs0,  0x00(sp)
-        fsd  fs1,  0x08(sp)
-        fsd  fs2,  0x10(sp)
-        fsd  fs3,  0x18(sp)
-        fsd  fs4,  0x20(sp)
-        fsd  fs5,  0x28(sp)
-        fsd  fs6,  0x30(sp)
-        fsd  fs7,  0x38(sp)
-        fsd  fs8,  0x40(sp)
-        fsd  fs9,  0x48(sp)
-        fsd  fs10, 0x50(sp)
-        fsd  fs11, 0x58(sp)
+        //fsd  fs0,  0x00(sp)
+        //fsd  fs1,  0x08(sp)
+        //fsd  fs2,  0x10(sp)
+        //fsd  fs3,  0x18(sp)
+        //fsd  fs4,  0x20(sp)
+        //fsd  fs5,  0x28(sp)
+        //fsd  fs6,  0x30(sp)
+        //fsd  fs7,  0x38(sp)
+        //fsd  fs8,  0x40(sp)
+        //fsd  fs9,  0x48(sp)
+        //fsd  fs10, 0x50(sp)
+        //fsd  fs11, 0x58(sp)
 
         // Save integer registers
         sd a0, 0x60(sp)  // Save a0 to 0x60
@@ -649,18 +649,18 @@ LOCAL_LABEL(NoAbort):
         amoor.w  a1, a3, (t3)
 
         // Restore floating-point registers
-        fld  fs0,  0x00(sp)
-        fld  fs1,  0x08(sp)
-        fld  fs2,  0x10(sp)
-        fld  fs3,  0x18(sp)
-        fld  fs4,  0x20(sp)
-        fld  fs5,  0x28(sp)
-        fld  fs6,  0x30(sp)
-        fld  fs7,  0x38(sp)
-        fld  fs8,  0x40(sp)
-        fld  fs9,  0x48(sp)
-        fld  fs10, 0x50(sp)
-        fld  fs11, 0x58(sp)
+        //fld  fs0,  0x00(sp)
+        //fld  fs1,  0x08(sp)
+        //fld  fs2,  0x10(sp)
+        //fld  fs3,  0x18(sp)
+        //fld  fs4,  0x20(sp)
+        //fld  fs5,  0x28(sp)
+        //fld  fs6,  0x30(sp)
+        //fld  fs7,  0x38(sp)
+        //fld  fs8,  0x40(sp)
+        //fld  fs9,  0x48(sp)
+        //fld  fs10, 0x50(sp)
+        //fld  fs11, 0x58(sp)
 
         // Free call funclet frame
         FREE_CALL_FUNCLET_FRAME 0x80
@@ -685,18 +685,18 @@ LOCAL_LABEL(NoAbort):
 
     NESTED_ENTRY RhpCallFilterFunclet, _TEXT, NoHandler
         ALLOC_CALL_FUNCLET_FRAME 0x60
-        fsd  fs0,  0x00(sp)
-        fsd  fs1,  0x08(sp)
-        fsd  fs2,  0x10(sp)
-        fsd  fs3,  0x18(sp)
-        fsd  fs4,  0x20(sp)
-        fsd  fs5,  0x28(sp)
-        fsd  fs6,  0x30(sp)
-        fsd  fs7,  0x38(sp)
-        fsd  fs8,  0x40(sp)
-        fsd  fs9,  0x48(sp)
-        fsd  fs10, 0x50(sp)
-        fsd  fs11, 0x58(sp)
+        //fsd  fs0,  0x00(sp)
+        //fsd  fs1,  0x08(sp)
+        //fsd  fs2,  0x10(sp)
+        //fsd  fs3,  0x18(sp)
+        //fsd  fs4,  0x20(sp)
+        //fsd  fs5,  0x28(sp)
+        //fsd  fs6,  0x30(sp)
+        //fsd  fs7,  0x38(sp)
+        //fsd  fs8,  0x40(sp)
+        //fsd  fs9,  0x48(sp)
+        //fsd  fs10, 0x50(sp)
+        //fsd  fs11, 0x58(sp)
 
         ld  t3, OFFSETOF__REGDISPLAY__pFP(a2)
         ld  fp, 0(t3)
@@ -709,18 +709,18 @@ LOCAL_LABEL(NoAbort):
 
     ALTERNATE_ENTRY RhpCallFilterFunclet2
 
-        fld  fs0,  0x00(sp)
-        fld  fs1,  0x08(sp)
-        fld  fs2,  0x10(sp)
-        fld  fs3,  0x18(sp)
-        fld  fs4,  0x20(sp)
-        fld  fs5,  0x28(sp)
-        fld  fs6,  0x30(sp)
-        fld  fs7,  0x38(sp)
-        fld  fs8,  0x40(sp)
-        fld  fs9,  0x48(sp)
-        fld  fs10, 0x50(sp)
-        fld  fs11, 0x58(sp)
+        //fld  fs0,  0x00(sp)
+        //fld  fs1,  0x08(sp)
+        //fld  fs2,  0x10(sp)
+        //fld  fs3,  0x18(sp)
+        //fld  fs4,  0x20(sp)
+        //fld  fs5,  0x28(sp)
+        //fld  fs6,  0x30(sp)
+        //fld  fs7,  0x38(sp)
+        //fld  fs8,  0x40(sp)
+        //fld  fs9,  0x48(sp)
+        //fld  fs10, 0x50(sp)
+        //fld  fs11, 0x58(sp)
 
         FREE_CALL_FUNCLET_FRAME 0x60
         EPILOG_RETURN
diff --git a/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S b/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S
index d7989f2f6..de24aaec7 100644
--- a/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S
+++ b/src/coreclr/nativeaot/Runtime/riscv64/GcProbe.S
@@ -37,10 +37,10 @@
     sd  a1, 0x88(sp)
 
     # Save the FP return registers
-    fsd  fa0, 0x90(sp)
-    fsd  fa1, 0x98(sp)
-    fsd  fa2, 0xa0(sp)
-    fsd  fa3, 0xa8(sp)
+    //fsd  fa0, 0x90(sp)
+    //fsd  fa1, 0x98(sp)
+    //fsd  fa2, 0xa0(sp)
+    //fsd  fa3, 0xa8(sp)
 
     # Perform the rest of the PInvokeTransitionFrame initialization.
     sd  \threadReg, OFFSETOF__PInvokeTransitionFrame__m_pThread(sp)        # Thread * (unused by stackwalker)
@@ -62,10 +62,10 @@
     ld  a1, 0x88(sp)
 
     // Restore the FP return registers
-    fld  fa0, 0x90(sp)
-    fld  fa1, 0x98(sp)
-    fld  fa2, 0xa0(sp)
-    fld  fa3, 0xa8(sp)
+    //fld  fa0, 0x90(sp)
+    //fld  fa1, 0x98(sp)
+    //fld  fa2, 0xa0(sp)
+    //fld  fa3, 0xa8(sp)
 
     // Restore callee saved registers
     EPILOG_RESTORE_REG_PAIR s1, s2,  0x20
diff --git a/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S b/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S
index 234e6b463..19fbdd9f3 100644
--- a/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S
+++ b/src/coreclr/nativeaot/Runtime/riscv64/UniversalTransition.S
@@ -89,14 +89,14 @@
         PROLOG_SAVE_REG_PAIR_INDEXED fp, ra, STACK_SIZE
 
         # Floating point registers
-        fsd         fa0, FLOAT_ARG_OFFSET(sp)
-        fsd         fa1, FLOAT_ARG_OFFSET + 0x08(sp)
-        fsd         fa2, FLOAT_ARG_OFFSET + 0x10(sp)
-        fsd         fa3, FLOAT_ARG_OFFSET + 0x18(sp)
-        fsd         fa4, FLOAT_ARG_OFFSET + 0x20(sp)
-        fsd         fa5, FLOAT_ARG_OFFSET + 0x28(sp)
-        fsd         fa6, FLOAT_ARG_OFFSET + 0x30(sp)
-        fsd         fa7, FLOAT_ARG_OFFSET + 0x38(sp)
+        //fsd         fa0, FLOAT_ARG_OFFSET(sp)
+        //fsd         fa1, FLOAT_ARG_OFFSET + 0x08(sp)
+        //fsd         fa2, FLOAT_ARG_OFFSET + 0x10(sp)
+        //fsd         fa3, FLOAT_ARG_OFFSET + 0x18(sp)
+        //fsd         fa4, FLOAT_ARG_OFFSET + 0x20(sp)
+        //fsd         fa5, FLOAT_ARG_OFFSET + 0x28(sp)
+        //fsd         fa6, FLOAT_ARG_OFFSET + 0x30(sp)
+        //fsd         fa7, FLOAT_ARG_OFFSET + 0x38(sp)
 
         # Space for return block data (0x10 bytes)
 
@@ -113,14 +113,14 @@
 #ifdef TRASH_SAVED_ARGUMENT_REGISTERS
         PREPARE_EXTERNAL_VAR RhpFpTrashValues, a1
 
-        fld fa0, 0x00(a1)
-        fld fa1, 0x08(a1)
-        fld fa2, 0x10(a1)
-        fld fa3, 0x18(a1)
-        fld fa4, 0x20(a1)
-        fld fa5, 0x28(a1)
-        fld fa6, 0x30(a1)
-        fld fa7, 0x38(a1)
+        //fld fa0, 0x00(a1)
+        //fld fa1, 0x08(a1)
+        //fld fa2, 0x10(a1)
+        //fld fa3, 0x18(a1)
+        //fld fa4, 0x20(a1)
+        //fld fa5, 0x28(a1)
+        //fld fa6, 0x30(a1)
+        //fld fa7, 0x38(a1)
 
         PREPARE_EXTERNAL_VAR RhpIntegerTrashValues, a1
 
@@ -143,14 +143,14 @@ ALTERNATE_ENTRY ReturnFrom\FunctionName
         mv          t2, a0
 
         # Restore floating point registers
-        fld         fa0, FLOAT_ARG_OFFSET(sp)
-        fld         fa1, FLOAT_ARG_OFFSET + 0x08(sp)
-        fld         fa2, FLOAT_ARG_OFFSET + 0x10(sp)
-        fld         fa3, FLOAT_ARG_OFFSET + 0x18(sp)
-        fld         fa4, FLOAT_ARG_OFFSET + 0x20(sp)
-        fld         fa5, FLOAT_ARG_OFFSET + 0x28(sp)
-        fld         fa6, FLOAT_ARG_OFFSET + 0x30(sp)
-        fld         fa7, FLOAT_ARG_OFFSET + 0x38(sp)
+        //fld         fa0, FLOAT_ARG_OFFSET(sp)
+        //fld         fa1, FLOAT_ARG_OFFSET + 0x08(sp)
+        //fld         fa2, FLOAT_ARG_OFFSET + 0x10(sp)
+        //fld         fa3, FLOAT_ARG_OFFSET + 0x18(sp)
+        //fld         fa4, FLOAT_ARG_OFFSET + 0x20(sp)
+        //fld         fa5, FLOAT_ARG_OFFSET + 0x28(sp)
+        //fld         fa6, FLOAT_ARG_OFFSET + 0x30(sp)
+        //fld         fa7, FLOAT_ARG_OFFSET + 0x38(sp)
 
         # Restore the argument registers
         ld          a0, ARGUMENT_REGISTERS_OFFSET(sp)
diff --git a/src/coreclr/nativeaot/Runtime/unix/configure.cmake b/src/coreclr/nativeaot/Runtime/unix/configure.cmake
index 7cd0bf8ef..1d6f041a8 100644
--- a/src/coreclr/nativeaot/Runtime/unix/configure.cmake
+++ b/src/coreclr/nativeaot/Runtime/unix/configure.cmake
@@ -28,10 +28,10 @@ elseif (HAVE_PTHREAD_IN_LIBC)
   set(PTHREAD_LIBRARY c)
 endif()
 
-check_library_exists(${PTHREAD_LIBRARY} pthread_attr_get_np "" HAVE_PTHREAD_ATTR_GET_NP)
-check_library_exists(${PTHREAD_LIBRARY} pthread_getattr_np "" HAVE_PTHREAD_GETATTR_NP)
-check_library_exists(${PTHREAD_LIBRARY} pthread_condattr_setclock "" HAVE_PTHREAD_CONDATTR_SETCLOCK)
-check_library_exists(${PTHREAD_LIBRARY} pthread_getthreadid_np "" HAVE_PTHREAD_GETTHREADID_NP)
+#check_library_exists(${PTHREAD_LIBRARY} pthread_attr_get_np "" HAVE_PTHREAD_ATTR_GET_NP)
+#check_library_exists(${PTHREAD_LIBRARY} pthread_getattr_np "" HAVE_PTHREAD_GETATTR_NP)
+#check_library_exists(${PTHREAD_LIBRARY} pthread_condattr_setclock "" HAVE_PTHREAD_CONDATTR_SETCLOCK)
+#check_library_exists(${PTHREAD_LIBRARY} pthread_getthreadid_np "" HAVE_PTHREAD_GETTHREADID_NP)
 
 check_function_exists(clock_nanosleep HAVE_CLOCK_NANOSLEEP)
 
diff --git a/src/coreclr/pal/inc/unixasmmacrosriscv64.inc b/src/coreclr/pal/inc/unixasmmacrosriscv64.inc
index 8201a0381..81b695492 100644
--- a/src/coreclr/pal/inc/unixasmmacrosriscv64.inc
+++ b/src/coreclr/pal/inc/unixasmmacrosriscv64.inc
@@ -161,14 +161,14 @@ C_FUNC(\Name):
 
 // Reserve 64 bytes of memory before calling  SAVE_FLOAT_ARGUMENT_REGISTERS
 .macro SAVE_FLOAT_ARGUMENT_REGISTERS reg, ofs
-    fsd  fa0, (\ofs)(\reg)
-    fsd  fa1, (\ofs + 8)(\reg)
-    fsd  fa2, (\ofs + 16)(\reg)
-    fsd  fa3, (\ofs + 24)(\reg)
-    fsd  fa4, (\ofs + 32)(\reg)
-    fsd  fa5, (\ofs + 40)(\reg)
-    fsd  fa6, (\ofs + 48)(\reg)
-    fsd  fa7, (\ofs + 56)(\reg)
+    //fsd  fa0, (\ofs)(\reg)
+    //fsd  fa1, (\ofs + 8)(\reg)
+    //fsd  fa2, (\ofs + 16)(\reg)
+    //fsd  fa3, (\ofs + 24)(\reg)
+    //fsd  fa4, (\ofs + 32)(\reg)
+    //fsd  fa5, (\ofs + 40)(\reg)
+    //fsd  fa6, (\ofs + 48)(\reg)
+    //fsd  fa7, (\ofs + 56)(\reg)
 .endm
 
 // Reserve 64 bytes of memory before calling  SAVE_FLOAT_CALLEESAVED_REGISTERS
@@ -199,14 +199,14 @@ C_FUNC(\Name):
 .endm
 
 .macro RESTORE_FLOAT_ARGUMENT_REGISTERS reg, ofs
-    fld  fa0, (\ofs)(\reg)
-    fld  fa1, (\ofs + 8)(\reg)
-    fld  fa2, (\ofs + 16)(\reg)
-    fld  fa3, (\ofs + 24)(\reg)
-    fld  fa4, (\ofs + 32)(\reg)
-    fld  fa5, (\ofs + 40)(\reg)
-    fld  fa6, (\ofs + 48)(\reg)
-    fld  fa7, (\ofs + 56)(\reg)
+    //fld  fa0, (\ofs)(\reg)
+    //fld  fa1, (\ofs + 8)(\reg)
+    //fld  fa2, (\ofs + 16)(\reg)
+    //fld  fa3, (\ofs + 24)(\reg)
+    //fld  fa4, (\ofs + 32)(\reg)
+    //fld  fa5, (\ofs + 40)(\reg)
+    //fld  fa6, (\ofs + 48)(\reg)
+    //fld  fa7, (\ofs + 56)(\reg)
 .endm
 
 .macro RESTORE_FLOAT_CALLEESAVED_REGISTERS reg, ofs
diff --git a/src/coreclr/pal/src/arch/riscv64/context2.S b/src/coreclr/pal/src/arch/riscv64/context2.S
index 5bb06b0ec..13b51c77b 100644
--- a/src/coreclr/pal/src/arch/riscv64/context2.S
+++ b/src/coreclr/pal/src/arch/riscv64/context2.S
@@ -26,41 +26,41 @@ LEAF_ENTRY RtlRestoreContext, _TEXT
     //64-bits FPR.
     addi t0, t4, CONTEXT_FPU_OFFSET
 
-    fld  f0, (CONTEXT_F0)(t0)
-    fld  f1, (CONTEXT_F1)(t0)
-    fld  f2, (CONTEXT_F2)(t0)
-    fld  f3, (CONTEXT_F3)(t0)
-    fld  f4, (CONTEXT_F4)(t0)
-    fld  f5, (CONTEXT_F5)(t0)
-    fld  f6, (CONTEXT_F6)(t0)
-    fld  f7, (CONTEXT_F7)(t0)
-    fld  f8, (CONTEXT_F8)(t0)
-    fld  f9, (CONTEXT_F9)(t0)
-    fld  f10, (CONTEXT_F10)(t0)
-    fld  f11, (CONTEXT_F11)(t0)
-    fld  f12, (CONTEXT_F12)(t0)
-    fld  f13, (CONTEXT_F13)(t0)
-    fld  f14, (CONTEXT_F14)(t0)
-    fld  f15, (CONTEXT_F15)(t0)
-    fld  f16, (CONTEXT_F16)(t0)
-    fld  f17, (CONTEXT_F17)(t0)
-    fld  f18, (CONTEXT_F18)(t0)
-    fld  f19, (CONTEXT_F19)(t0)
-    fld  f20, (CONTEXT_F20)(t0)
-    fld  f21, (CONTEXT_F21)(t0)
-    fld  f22, (CONTEXT_F22)(t0)
-    fld  f23, (CONTEXT_F23)(t0)
-    fld  f24, (CONTEXT_F24)(t0)
-    fld  f25, (CONTEXT_F25)(t0)
-    fld  f26, (CONTEXT_F26)(t0)
-    fld  f27, (CONTEXT_F27)(t0)
-    fld  f28, (CONTEXT_F28)(t0)
-    fld  f29, (CONTEXT_F29)(t0)
-    fld  f30, (CONTEXT_F30)(t0)
-    fld  f31, (CONTEXT_F31)(t0)
+    //fld  f0, (CONTEXT_F0)(t0)
+    //fld  f1, (CONTEXT_F1)(t0)
+    //fld  f2, (CONTEXT_F2)(t0)
+    //fld  f3, (CONTEXT_F3)(t0)
+    //fld  f4, (CONTEXT_F4)(t0)
+    //fld  f5, (CONTEXT_F5)(t0)
+    //fld  f6, (CONTEXT_F6)(t0)
+    //fld  f7, (CONTEXT_F7)(t0)
+    //fld  f8, (CONTEXT_F8)(t0)
+    //fld  f9, (CONTEXT_F9)(t0)
+    //fld  f10, (CONTEXT_F10)(t0)
+    //fld  f11, (CONTEXT_F11)(t0)
+    //fld  f12, (CONTEXT_F12)(t0)
+    //fld  f13, (CONTEXT_F13)(t0)
+    //fld  f14, (CONTEXT_F14)(t0)
+    //fld  f15, (CONTEXT_F15)(t0)
+    //fld  f16, (CONTEXT_F16)(t0)
+    //fld  f17, (CONTEXT_F17)(t0)
+    //fld  f18, (CONTEXT_F18)(t0)
+    //fld  f19, (CONTEXT_F19)(t0)
+    //fld  f20, (CONTEXT_F20)(t0)
+    //fld  f21, (CONTEXT_F21)(t0)
+    //fld  f22, (CONTEXT_F22)(t0)
+    //fld  f23, (CONTEXT_F23)(t0)
+    //fld  f24, (CONTEXT_F24)(t0)
+    //fld  f25, (CONTEXT_F25)(t0)
+    //fld  f26, (CONTEXT_F26)(t0)
+    //fld  f27, (CONTEXT_F27)(t0)
+    //fld  f28, (CONTEXT_F28)(t0)
+    //fld  f29, (CONTEXT_F29)(t0)
+    //fld  f30, (CONTEXT_F30)(t0)
+    //fld  f31, (CONTEXT_F31)(t0)
 
     lw t1, (CONTEXT_FLOAT_CONTROL_OFFSET)(t0)
-    fscsr x0, t1
+    //fscsr x0, t1
 
 LOCAL_LABEL(No_Restore_CONTEXT_FLOATING_POINT):
 
@@ -205,40 +205,40 @@ LOCAL_LABEL(Done_CONTEXT_INTEGER):
 
     addi  a0, a0, CONTEXT_FPU_OFFSET
 
-    fsd  f0, (CONTEXT_F0)(a0)
-    fsd  f1, (CONTEXT_F1)(a0)
-    fsd  f2, (CONTEXT_F2)(a0)
-    fsd  f3, (CONTEXT_F3)(a0)
-    fsd  f4, (CONTEXT_F4)(a0)
-    fsd  f5, (CONTEXT_F5)(a0)
-    fsd  f6, (CONTEXT_F6)(a0)
-    fsd  f7, (CONTEXT_F7)(a0)
-    fsd  f8, (CONTEXT_F8)(a0)
-    fsd  f9, (CONTEXT_F9)(a0)
-    fsd  f10, (CONTEXT_F10)(a0)
-    fsd  f11, (CONTEXT_F11)(a0)
-    fsd  f12, (CONTEXT_F12)(a0)
-    fsd  f13, (CONTEXT_F13)(a0)
-    fsd  f14, (CONTEXT_F14)(a0)
-    fsd  f15, (CONTEXT_F15)(a0)
-    fsd  f16, (CONTEXT_F16)(a0)
-    fsd  f17, (CONTEXT_F17)(a0)
-    fsd  f18, (CONTEXT_F18)(a0)
-    fsd  f19, (CONTEXT_F19)(a0)
-    fsd  f20, (CONTEXT_F20)(a0)
-    fsd  f21, (CONTEXT_F21)(a0)
-    fsd  f22, (CONTEXT_F22)(a0)
-    fsd  f23, (CONTEXT_F23)(a0)
-    fsd  f24, (CONTEXT_F24)(a0)
-    fsd  f25, (CONTEXT_F25)(a0)
-    fsd  f26, (CONTEXT_F26)(a0)
-    fsd  f27, (CONTEXT_F27)(a0)
-    fsd  f28, (CONTEXT_F28)(a0)
-    fsd  f29, (CONTEXT_F29)(a0)
-    fsd  f30, (CONTEXT_F30)(a0)
-    fsd  f31, (CONTEXT_F31)(a0)
-
-    frcsr t0
+    //fsd  f0, (CONTEXT_F0)(a0)
+    //fsd  f1, (CONTEXT_F1)(a0)
+    //fsd  f2, (CONTEXT_F2)(a0)
+    //fsd  f3, (CONTEXT_F3)(a0)
+    //fsd  f4, (CONTEXT_F4)(a0)
+    //fsd  f5, (CONTEXT_F5)(a0)
+    //fsd  f6, (CONTEXT_F6)(a0)
+    //fsd  f7, (CONTEXT_F7)(a0)
+    //fsd  f8, (CONTEXT_F8)(a0)
+    //fsd  f9, (CONTEXT_F9)(a0)
+    //fsd  f10, (CONTEXT_F10)(a0)
+    //fsd  f11, (CONTEXT_F11)(a0)
+    //fsd  f12, (CONTEXT_F12)(a0)
+    //fsd  f13, (CONTEXT_F13)(a0)
+    //fsd  f14, (CONTEXT_F14)(a0)
+    //fsd  f15, (CONTEXT_F15)(a0)
+    //fsd  f16, (CONTEXT_F16)(a0)
+    //fsd  f17, (CONTEXT_F17)(a0)
+    //fsd  f18, (CONTEXT_F18)(a0)
+    //fsd  f19, (CONTEXT_F19)(a0)
+    //fsd  f20, (CONTEXT_F20)(a0)
+    //fsd  f21, (CONTEXT_F21)(a0)
+    //fsd  f22, (CONTEXT_F22)(a0)
+    //fsd  f23, (CONTEXT_F23)(a0)
+    //fsd  f24, (CONTEXT_F24)(a0)
+    //fsd  f25, (CONTEXT_F25)(a0)
+    //fsd  f26, (CONTEXT_F26)(a0)
+    //fsd  f27, (CONTEXT_F27)(a0)
+    //fsd  f28, (CONTEXT_F28)(a0)
+    //fsd  f29, (CONTEXT_F29)(a0)
+    //fsd  f30, (CONTEXT_F30)(a0)
+    //fsd  f31, (CONTEXT_F31)(a0)
+
+    //frcsr t0
     sd  t0, (CONTEXT_FLOAT_CONTROL_OFFSET)(a0)
 
 LOCAL_LABEL(Done_CONTEXT_FLOATING_POINT):
diff --git a/src/coreclr/pal/src/configure.cmake b/src/coreclr/pal/src/configure.cmake
index 3d89ba2f5..d33659019 100644
--- a/src/coreclr/pal/src/configure.cmake
+++ b/src/coreclr/pal/src/configure.cmake
@@ -92,7 +92,13 @@ endif()
 check_library_exists(c sched_getaffinity "" HAVE_SCHED_GETAFFINITY)
 check_library_exists(c sched_setaffinity "" HAVE_SCHED_SETAFFINITY)
 check_library_exists(pthread pthread_create "" HAVE_LIBPTHREAD)
-check_library_exists(c pthread_create "" HAVE_PTHREAD_IN_LIBC)
+
+if (CLR_CMAKE_HOST_ARCH_RISCV64)
+  set(HAVE_PTHREAD_IN_LIBC 1)
+else ()
+  check_library_exists(c pthread_create "" HAVE_PTHREAD_IN_LIBC)
+endif ()
+
 
 if (HAVE_LIBPTHREAD)
   set(PTHREAD_LIBRARY pthread)
@@ -925,7 +931,7 @@ elseif(CLR_CMAKE_TARGET_BROWSER)
   set(HAVE_SCHED_OTHER_ASSIGNABLE 0)
 else() # Anything else is Linux
   # LTTNG is not available on Android, so don't error out
-  if(FEATURE_EVENTSOURCE_XPLAT AND NOT HAVE_LTTNG_TRACEPOINT_H)
+  if(FEATURE_EVENTSOURCE_XPLAT AND NOT HAVE_LTTNG_TRACEPOINT_H AND FALSE)
     unset(HAVE_LTTNG_TRACEPOINT_H CACHE)
     message(FATAL_ERROR "Cannot find liblttng-ust-dev. Try installing liblttng-ust-dev  (or the appropriate packages for your platform)")
   endif()
diff --git a/src/coreclr/pal/src/eventprovider/CMakeLists.txt b/src/coreclr/pal/src/eventprovider/CMakeLists.txt
index ae7b58bb9..ff1062736 100644
--- a/src/coreclr/pal/src/eventprovider/CMakeLists.txt
+++ b/src/coreclr/pal/src/eventprovider/CMakeLists.txt
@@ -1,6 +1,6 @@
 set(EVENT_MANIFEST ${VM_DIR}/ClrEtwAll.man)
 
-if(FEATURE_EVENTSOURCE_XPLAT)
+if(FEATURE_EVENTSOURCE_XPLAT AND FALSE)
   add_subdirectory(lttngprovider)
 else()
   add_subdirectory(dummyprovider)
diff --git a/src/coreclr/vm/riscv64/asmhelpers.S b/src/coreclr/vm/riscv64/asmhelpers.S
index 69e1acee4..f8dbec3cc 100644
--- a/src/coreclr/vm/riscv64/asmhelpers.S
+++ b/src/coreclr/vm/riscv64/asmhelpers.S
@@ -517,8 +517,8 @@ NESTED_ENTRY OnHijackTripThread, _TEXT, NoHandler
     sd  a1, 128(sp)
 
     // save any FP/HFA return value(s)
-    fsd  f0, 136(sp)
-    fsd  f1, 144(sp)
+    //fsd  f0, 136(sp)
+    //fsd  f1, 144(sp)
 
     addi  a0, sp, 0
     call  C_FUNC(OnHijackWorker)
@@ -530,8 +530,8 @@ NESTED_ENTRY OnHijackTripThread, _TEXT, NoHandler
     ld  a1, 128(sp)
 
     // restore any FP/HFA return value(s)
-    fld  f0, 136(sp)
-    fld  f1, 144(sp)
+    //fld  f0, 136(sp)
+    //fld  f1, 144(sp)
 
     EPILOG_RESTORE_REG_PAIR   s1, s2, 16
     EPILOG_RESTORE_REG_PAIR   s3, s4, 32
diff --git a/src/coreclr/vm/riscv64/calldescrworkerriscv64.S b/src/coreclr/vm/riscv64/calldescrworkerriscv64.S
index 54725758b..d85aec02c 100644
--- a/src/coreclr/vm/riscv64/calldescrworkerriscv64.S
+++ b/src/coreclr/vm/riscv64/calldescrworkerriscv64.S
@@ -44,14 +44,14 @@ LOCAL_LABEL(donestack):
     ld t4, CallDescrData__pFloatArgumentRegisters(s1)
     beq t4, zero, LOCAL_LABEL(NoFloatingPoint)
 
-    fld fa0, 0(t4)
-    fld fa1, 8(t4)
-    fld fa2, 16(t4)
-    fld fa3, 24(t4)
-    fld fa4, 32(t4)
-    fld fa5, 40(t4)
-    fld fa6, 48(t4)
-    fld fa7, 56(t4)
+    //fld fa0, 0(t4)
+    //fld fa1, 8(t4)
+    //fld fa2, 16(t4)
+    //fld fa3, 24(t4)
+    //fld fa4, 32(t4)
+    //fld fa5, 40(t4)
+    //fld fa6, 48(t4)
+    //fld fa7, 56(t4)
 
 LOCAL_LABEL(NoFloatingPoint):
     // Copy [pArgumentRegisters, ..., pArgumentRegisters + 56]
@@ -80,7 +80,7 @@ LOCAL_LABEL(CallDescrWorkerInternalReturnAddress):
     // Just save the returned registers (fa0, fa1/a0) and let CopyReturnedFpStructFromRegisters worry about placing
     // the fields as they were originally laid out in memory.
 
-    fsd fa0, CallDescrData__returnValue(s1) // fa0 is always occupied; we have at least one floating field
+    //fsd fa0, CallDescrData__returnValue(s1) // fa0 is always occupied; we have at least one floating field
 
     andi a3, a3, FpStruct__BothFloat
     bne  a3, zero, LOCAL_LABEL(SecondFieldFloatReturn)
@@ -91,7 +91,7 @@ LOCAL_LABEL(CallDescrWorkerInternalReturnAddress):
     j  LOCAL_LABEL(ReturnDone)
 
 LOCAL_LABEL(SecondFieldFloatReturn):
-    fsd fa1, (CallDescrData__returnValue + 8)(s1)
+    //fsd fa1, (CallDescrData__returnValue + 8)(s1)
     j  LOCAL_LABEL(ReturnDone)
 
 LOCAL_LABEL(IntReturn):
diff --git a/src/native/corehost/apphost/static/empty.c b/src/native/corehost/apphost/static/empty.c
new file mode 100644
index 000000000..f44b624bd
--- /dev/null
+++ b/src/native/corehost/apphost/static/empty.c
@@ -0,0 +1,4 @@
+int main()
+{
+   return 0;
+}
\ No newline at end of file
diff --git a/src/native/corehost/apphost/static/CMakeLists.txt b/src/native/corehost/apphost/static/CMakeLists.txt
index 7d7d975d4..1c0ac3152 100644
--- a/src/native/corehost/apphost/static/CMakeLists.txt
+++ b/src/native/corehost/apphost/static/CMakeLists.txt
@@ -4,6 +4,12 @@
 project(singlefilehost)
 set(DOTNET_PROJECT_NAME "singlefilehost")
 
+if (CLR_CMAKE_HOST_ARCH_RISCV64)
+    add_executable(singlefilehost empty.c)
+    install_with_stripped_symbols(singlefilehost TARGETS corehost COMPONENT runtime)
+    return ()
+endif ()
+
 include_directories(..)
 include_directories(../..)
 include_directories(../../hostmisc)
diff --git a/src/native/external/libunwind/include/libunwind-riscv.h b/src/native/external/libunwind/include/libunwind-riscv.h
index 55605fe77..c99b86ece 100644
--- a/src/native/external/libunwind/include/libunwind-riscv.h
+++ b/src/native/external/libunwind/include/libunwind-riscv.h
@@ -64,7 +64,7 @@ typedef int64_t unw_sword_t;
 # define UNW_WORD_MAX UINT64_MAX
 #endif
 
-#if __riscv_flen == 64
+#if __riscv_flen == 64 || __riscv_flen == 0
 typedef double unw_tdep_fpreg_t;
 #elif __riscv_flen == 32
 typedef float unw_tdep_fpreg_t;
diff --git a/src/native/external/libunwind/include/tdep-riscv/libunwind_i.h b/src/native/external/libunwind/include/tdep-riscv/libunwind_i.h
index b0aebc358..39a3e8a2c 100644
--- a/src/native/external/libunwind/include/tdep-riscv/libunwind_i.h
+++ b/src/native/external/libunwind/include/tdep-riscv/libunwind_i.h
@@ -174,7 +174,7 @@ dwarf_getfp (struct dwarf_cursor *c, dwarf_loc_t loc, unw_fpreg_t *val)
 
   /* FIXME: unw_word_t may not be equal to FLEN */
   addr = DWARF_GET_MEM_LOC (loc);
-#if __riscv_xlen == __riscv_flen
+#if __riscv_xlen == __riscv_flen || __riscv_flen == 0
   return (*c->as->acc.access_mem) (c->as, addr, (unw_word_t *) valp,
                                        0, c->as_arg);
 #else
@@ -197,7 +197,7 @@ dwarf_putfp (struct dwarf_cursor *c, dwarf_loc_t loc, unw_fpreg_t val)
 
   /* FIXME: unw_word_t may not be equal to FLEN */
   addr = DWARF_GET_MEM_LOC (loc);
-#if __riscv_xlen == __riscv_flen
+#if __riscv_xlen == __riscv_flen || __riscv_flen == 0
   return (*c->as->acc.access_mem) (c->as, addr, (unw_word_t *) valp,
                                        1, c->as_arg);
 #else
diff --git a/src/native/external/libunwind/src/riscv/asm.h b/src/native/external/libunwind/src/riscv/asm.h
index 7f7b444f9..027146e93 100644
--- a/src/native/external/libunwind/src/riscv/asm.h
+++ b/src/native/external/libunwind/src/riscv/asm.h
@@ -32,7 +32,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */
 # define SZREG 8
 #endif
 
-#if __riscv_flen == 64
+#if __riscv_flen == 64 || __riscv_flen == 0
 # define SZFREG 8
 # define STORE_FP fsd
 # define LOAD_FP fld
diff --git a/src/native/external/libunwind/src/riscv/getcontext.S b/src/native/external/libunwind/src/riscv/getcontext.S
index 9c24888b8..144d0d691 100644
--- a/src/native/external/libunwind/src/riscv/getcontext.S
+++ b/src/native/external/libunwind/src/riscv/getcontext.S
@@ -58,7 +58,7 @@ _Uriscv_getcontext:
 	STORE s10, REG(26)
 	STORE s11, REG(27)
 
-#ifdef STORE_FP
+#if 0 //def STORE_FP
 	/* The FCSR is always 32-bits and comes after all registers */
 	frcsr a1
 	sw a1, FREG(32)
diff --git a/src/native/external/libunwind/src/riscv/setcontext.S b/src/native/external/libunwind/src/riscv/setcontext.S
index 43f0b9290..a613ae263 100644
--- a/src/native/external/libunwind/src/riscv/setcontext.S
+++ b/src/native/external/libunwind/src/riscv/setcontext.S
@@ -34,7 +34,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */
 _Uriscv_setcontext:
 	.cfi_startproc
 
-#ifdef LOAD_FP
+#if 0 //def LOAD_FP
 	/* The FCSR is always 32-bits and comes after all registers */
 	lw a1, FREG(32)
 	fscsr a1
diff --git a/src/native/libs/CMakeLists.txt b/src/native/libs/CMakeLists.txt
index cf8b2b47f..c6a8056ec 100644
--- a/src/native/libs/CMakeLists.txt
+++ b/src/native/libs/CMakeLists.txt
@@ -148,8 +148,11 @@ if (CLR_CMAKE_TARGET_UNIX OR CLR_CMAKE_TARGET_BROWSER OR CLR_CMAKE_TARGET_WASI)
     add_subdirectory(System.Native)
     add_subdirectory(System.Globalization.Native)
 
-    if (CLR_CMAKE_TARGET_BROWSER OR CLR_CMAKE_TARGET_WASI)
+    if (CLR_CMAKE_TARGET_BROWSER OR CLR_CMAKE_TARGET_WASI OR CLR_CMAKE_HOST_UNIX_RISCV64)
         # skip for now
+        if (CLR_CMAKE_HOST_UNIX_RISCV64)
+            add_subdirectory(System.Security.Cryptography.Native)
+        endif ()
     elseif (CLR_CMAKE_TARGET_APPLE)
         if (NOT CLR_CMAKE_TARGET_TVOS) # no gssapi on tvOS, see https://developer.apple.com/documentation/gss
             add_subdirectory(System.Net.Security.Native)
diff --git a/src/native/libs/System.Net.Security.Native/CMakeLists.txt b/src/native/libs/System.Net.Security.Native/CMakeLists.txt
index 4a19c74da..f4141f6bf 100644
--- a/src/native/libs/System.Net.Security.Native/CMakeLists.txt
+++ b/src/native/libs/System.Net.Security.Native/CMakeLists.txt
@@ -5,7 +5,7 @@ add_compile_options(-Wno-incompatible-pointer-types-discards-qualifiers)
 include(${CMAKE_CURRENT_LIST_DIR}/extra_libs.cmake)
 
 set(NATIVE_LIBS_EXTRA)
-if (NOT CLR_CMAKE_TARGET_BROWSER)
+if (NOT CLR_CMAKE_TARGET_BROWSER AND NOT CLR_CMAKE_HOST_UNIX_RISCV64)
     append_extra_security_libs(NATIVE_LIBS_EXTRA)
 endif()
 
@@ -21,7 +21,7 @@ if (GEN_SHARED_LIB)
     )
 endif()
 
-if (NOT GEN_SHARED_LIB AND NOT CLR_CMAKE_TARGET_MACCATALYST AND NOT CLR_CMAKE_TARGET_IOS AND NOT CLR_CMAKE_TARGET_TVOS AND NOT CLR_CMAKE_TARGET_ANDROID AND NOT CLR_CMAKE_TARGET_BROWSER AND NOT CLR_CMAKE_TARGET_WASI)
+if (NOT GEN_SHARED_LIB AND NOT CLR_CMAKE_TARGET_MACCATALYST AND NOT CLR_CMAKE_TARGET_IOS AND NOT CLR_CMAKE_TARGET_TVOS AND NOT CLR_CMAKE_TARGET_ANDROID AND NOT CLR_CMAKE_TARGET_BROWSER AND NOT CLR_CMAKE_TARGET_WASI AND NOT CLR_CMAKE_HOST_UNIX_RISCV64)
     set(NATIVEGSS_SOURCES ${NATIVEGSS_SOURCES} entrypoints.c)
 endif()
 
diff --git a/src/native/libs/System.Net.Security.Native/extra_libs.cmake b/src/native/libs/System.Net.Security.Native/extra_libs.cmake
index a23bce007..dcb2f5e00 100644
--- a/src/native/libs/System.Net.Security.Native/extra_libs.cmake
+++ b/src/native/libs/System.Net.Security.Native/extra_libs.cmake
@@ -1,23 +1,24 @@
 
 macro(append_extra_security_libs NativeLibsExtra)
-  if (HAVE_GSSFW_HEADERS)
-     find_library(LIBGSS NAMES GSS)
-     if(LIBGSS STREQUAL LIBGSS-NOTFOUND)
-        message(FATAL_ERROR "Cannot find GSS.Framework and System.Net.Security.Native cannot build without it. Try installing GSS.Framework (or the appropriate package for your platform)")
-     endif()
-  elseif(HAVE_HEIMDAL_HEADERS)
-     find_library(LIBGSS NAMES gssapi)
-     if(LIBGSS STREQUAL LIBGSS-NOTFOUND)
-        message(FATAL_ERROR "Cannot find libgssapi and System.Net.Security.Native cannot build without it. Try installing heimdal (or the appropriate package for your platform)")
-     endif()
-  elseif(HeimdalGssApi)
-       message(FATAL_ERROR "HeimdalGssApi option was set but gssapi headers could not be found and System.Net.Security.Native cannot build without the headers. Try installing heimdal (or the appropriate package for your platform)")
-  else()
-     find_library(LIBGSS NAMES gssapi_krb5)
-     if(LIBGSS STREQUAL LIBGSS-NOTFOUND)
-        message(FATAL_ERROR "Cannot find libgssapi_krb5 and System.Net.Security.Native cannot build without it. Try installing libkrb5-dev (or the appropriate package for your platform)")
-     endif()
-  endif()
+
+  #if (HAVE_GSSFW_HEADERS)
+  #   find_library(LIBGSS NAMES GSS)
+  #   if(LIBGSS STREQUAL LIBGSS-NOTFOUND)
+  #      message(FATAL_ERROR "Cannot find GSS.Framework and System.Net.Security.Native cannot build without it. Try installing GSS.Framework (or the appropriate package for your platform)")
+  #   endif()
+  #elseif(HAVE_HEIMDAL_HEADERS)
+  #   find_library(LIBGSS NAMES gssapi)
+  #   if(LIBGSS STREQUAL LIBGSS-NOTFOUND)
+  #      message(FATAL_ERROR "Cannot find libgssapi and System.Net.Security.Native cannot build without it. Try installing heimdal (or the appropriate package for your platform)")
+  #   endif()
+  #elseif(HeimdalGssApi)
+  #     message(FATAL_ERROR "HeimdalGssApi option was set but gssapi headers could not be found and System.Net.Security.Native cannot build without the headers. Try installing heimdal (or the appropriate package for your platform)")
+  #else()
+  #   find_library(LIBGSS NAMES gssapi_krb5)
+  #   if(LIBGSS STREQUAL LIBGSS-NOTFOUND)
+  #      message(FATAL_ERROR "Cannot find libgssapi_krb5 and System.Net.Security.Native cannot build without it. Try installing libkrb5-dev (or the appropriate package for your platform)")
+  #   endif()
+  #endif()
 
   if(CLR_CMAKE_TARGET_LINUX)
     # On Linux libgssapi_krb5.so is loaded on demand to tolerate its absence in singlefile apps that do not use it
diff --git a/src/native/libs/configure.cmake b/src/native/libs/configure.cmake
index 5348adb6b..45d85bb85 100644
--- a/src/native/libs/configure.cmake
+++ b/src/native/libs/configure.cmake
@@ -640,7 +640,12 @@ check_symbol_exists(
     HAVE_CLOCK_GETTIME_NSEC_NP)
 
 check_library_exists(pthread pthread_create "" HAVE_LIBPTHREAD)
-check_library_exists(c pthread_create "" HAVE_PTHREAD_IN_LIBC)
+if (CLR_CMAKE_HOST_ARCH_RISCV64)
+  set(HAVE_PTHREAD_IN_LIBC 1)
+else ()
+  check_library_exists(c pthread_create "" HAVE_PTHREAD_IN_LIBC)
+endif ()
+
 
 if (HAVE_LIBPTHREAD)
   set(PTHREAD_LIBRARY pthread)
@@ -773,9 +778,9 @@ check_c_source_compiles(
     "
     HAVE_MKSTEMP)
 
-if (NOT HAVE_MKSTEMPS AND NOT HAVE_MKSTEMP AND NOT CLR_CMAKE_TARGET_WASI)
-    message(FATAL_ERROR "Cannot find mkstemps nor mkstemp on this platform.")
-endif()
+#if (NOT HAVE_MKSTEMPS AND NOT HAVE_MKSTEMP AND NOT CLR_CMAKE_TARGET_WASI)
+#    message(FATAL_ERROR "Cannot find mkstemps nor mkstemp on this platform.")
+#endif()
 
 check_c_source_compiles(
     "
@@ -1015,8 +1020,8 @@ set (CMAKE_REQUIRED_LIBRARIES ${PREVIOUS_CMAKE_REQUIRED_LIBRARIES})
 set (HAVE_INOTIFY 0)
 if (HAVE_INOTIFY_INIT AND HAVE_INOTIFY_ADD_WATCH AND HAVE_INOTIFY_RM_WATCH)
     set (HAVE_INOTIFY 1)
-elseif (CLR_CMAKE_TARGET_LINUX AND NOT CLR_CMAKE_TARGET_BROWSER AND NOT CLR_CMAKE_TARGET_WASI)
-    message(FATAL_ERROR "Cannot find inotify functions on a Linux platform.")
+#elseif (CLR_CMAKE_TARGET_LINUX AND NOT CLR_CMAKE_TARGET_BROWSER AND NOT CLR_CMAKE_TARGET_WASI)
+    #message(FATAL_ERROR "Cannot find inotify functions on a Linux platform.")
 endif()
 
 option(HeimdalGssApi "use heimdal implementation of GssApi" OFF)
@@ -1100,9 +1105,9 @@ check_symbol_exists(
     sys/sysmacros.h
     HAVE_MAKEDEV_SYSMACROSH)
 
-if (NOT HAVE_MAKEDEV_FILEH AND NOT HAVE_MAKEDEV_SYSMACROSH AND NOT CLR_CMAKE_TARGET_WASI AND NOT CLR_CMAKE_TARGET_HAIKU)
-  message(FATAL_ERROR "Cannot find the makedev function on this platform.")
-endif()
+#if (NOT HAVE_MAKEDEV_FILEH AND NOT HAVE_MAKEDEV_SYSMACROSH AND NOT CLR_CMAKE_TARGET_WASI AND NOT CLR_CMAKE_TARGET_HAIKU)
+#  message(FATAL_ERROR "Cannot find the makedev function on this platform.")
+#endif()
 
 check_symbol_exists(
     getgrgid_r
