diff --git a/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/DeserializationToken.cs b/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/DeserializationToken.cs
index 5c842d08122..8c489f55057 100644
--- a/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/DeserializationToken.cs
+++ b/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/DeserializationToken.cs
@@ -16,6 +16,7 @@ internal DeserializationToken(DeserializationTracker? tracker)
         // If this token owned the DeserializationTracker, turn off DeserializationInProgress tracking
         public void Dispose()
         {
+#if false
             if (_tracker != null && _tracker.DeserializationInProgress)
             {
                 lock (_tracker)
@@ -27,6 +28,7 @@ public void Dispose()
                     }
                 }
             }
+#endif
         }
     }
 }
diff --git a/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/SerializationInfo.SerializationGuard.cs b/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/SerializationInfo.SerializationGuard.cs
index 13e55ac6c8b..045c28f6ebc 100644
--- a/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/SerializationInfo.SerializationGuard.cs
+++ b/src/libraries/System.Private.CoreLib/src/System/Runtime/Serialization/SerializationInfo.SerializationGuard.cs
@@ -10,6 +10,12 @@ namespace System.Runtime.Serialization
     /// <summary>The structure for holding all of the data needed for object serialization and deserialization.</summary>
     public sealed partial class SerializationInfo
     {
+#pragma warning disable IDE0060
+        internal static void ThrowIfDeserializationInProgress() { }
+        internal static void ThrowIfDeserializationInProgress(string switchSuffix, ref int cachedValue) { }
+        public static DeserializationToken StartDeserialization() => new DeserializationToken(null);
+
+#if false
         internal static AsyncLocal<bool> AsyncDeserializationInProgress { get; } = new AsyncLocal<bool>();
 
         [ThreadStatic]
@@ -99,5 +105,6 @@ public static DeserializationToken StartDeserialization()
 
             return new DeserializationToken(null);
         }
+#endif
     }
 }
